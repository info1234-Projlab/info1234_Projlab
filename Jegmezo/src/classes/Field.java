package classes;
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Field.java
//  @ Date : 3/27/2020
//  @ Author : 
//
//

import java.util.ArrayList;

/**
 * 
 * Ez az objektum eltárolja a szomszédos jégtáblákat, ami segítségével megtudhatjuk,
hogy a rajta álló játékos hova léphet. Tudjuk róla hogy stabil-e vagy instabil illetve,
hogy mennyi hó van a tetején. Azt is el tudja tárolni, hogy építettek-e már rá iglut és
lehetnek rajta eszközök is. Igluból egy még eszközből bármennyi lehet rajta. A
stabilitása pedig meghatározza, hogy hány embert bír el anélkül, hogy kibillenjen és
a vízbe esnének a játékosok. A kibillenéstől nem szűnik meg a jégtábla. Tehát (ha a
játékosok túlélik és megy tovább a játék) a jégtábla paraméterei nem változnak és a
rajta lévő tárgyak is megmaradnak. Egyik mezőről a másikra lépni egy munkát vesz
igénybe.
 *
 */



public class Field {
	protected int capacity;
	protected int snowLayer;
	protected boolean hasIglu;
	protected boolean visibleCapacity;
	protected int numOfPlayers;
	protected ArrayList<Field> neighbourFields;
	private ArrayList<Player> players;
	
	/**
	 * 
	 * @param capacity	Megadja hány embert bír el a mező.
	 * @param snowLayer	Megadja hány réteg hó van a mezőn. 
	 */
	public Field(int capacity, int snowLayer) {
		this.capacity = capacity;
		this.snowLayer = snowLayer;
		this.hasIglu = false;
		this.visibleCapacity = false;
		this.numOfPlayers = 0;
	}
	
	public void AddNeighbour(Field neighbour) {
		neighbourFields.add(neighbour);
	}
	
	public boolean IsFall() {
	}
	
	public void Fall() {
	}
	
	public boolean CanBuildIglu() {
		if(this.capacity > 0 && this.hasIglu == false) {
			System.out.printf("Igen, lehet iglut építeni! \n");
			return true;
		}else {
			System.out.printf("Nem, sajnos ide nem lehet iglut építeni! \n");
			return false;	
		}
	}
	
	public void AddItem(Inventory item) {
	}
	
	public void RemoveItem(Player p) {
	}
	
	public void DigItems(int layers) {
	}
	
	public boolean IsFull() {
	}
	
	public void AddPlayer(Player p) {
	}
	
	public void RemovePlayer(Player p) {
	}
	
	public void SetHasIglu(boolean b) {
		this.hasIglu = b ;
		if(b == true) {
			System.out.printf("Jelenleg van rajta iglu! \n");
		}
		else
			System.out.printf("Jelenleg nincs rajta iglu! \n");
	}
}
