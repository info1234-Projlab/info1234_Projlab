package classes;
import java.util.ArrayList;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : FlareGun.java
//  @ Date : 3/27/2020
//  @ Author : 
//
//

/**
 *Az osztály felelõssége a jelzõfegyver menedzselése.
 * Figyelnie kell, hogy felvették-e az alkatrészeket, kigyûlt-e már mind a három és a fegyver elsütéséért is ez felelõs.
 *
 */


public class FlareGun implements Inventory {
	protected int layer;
	protected boolean visible;
	protected ArrayList<FlareGun> components;
	
	/**
	 * 
	 * @param layer mennyi réteg hó van a tárgy felett
	 * @param visible ez akkor igaz ha láthatóa tárgy(nincs rajta hó
	 * @param tab indentálás
	 * még van egy ArrayList váltazója is amiben a pisztolytartozékokat fogjuk pakolni, ha felvettük
	 */
	public FlareGun(int layer, boolean visible, int tab) {
		this.layer=layer;
		this.visible=visible;
		this.components=new ArrayList<>();
		for(int i=0; i<tab; i++)
			System.out.print("\t");
		System.out.println("A FlareGun osztaly konstruktora hivodott meg.");
	}
	
	
	public boolean Shoot(Player p, int tab) {
		for(int i=0; i<tab; i++)
			System.out.print("\t");
		System.out.print("A FlareGun osztaly Shoot() fuggvenye hivodott meg");
		if (p.GetNumOfAction(tab + 1) <= 0)
			return false;
		if (!(components.contains(new Gun()) && components.contains(new Flare()) && components.contains(new Cartridge()))) {
			return false;
		}
		p.SetWin(true);
		return true;
		
	}
	
	public boolean Eat(Player p) {
		return false;
	}
	
	public boolean Dig(Player p) {
		return false;
	}
	
	public boolean PutOn(Player p) {
		return false;
	}
	
	public boolean Swim(Player p) {
		return false;
	}
	
	/**
	 * Ha valaki el szeretne dobni egy tárgyat akkor hívódik ez a függvény. 
	 * Ilyenkor, a paraméterül kapott Player items tárolójából kiveszi az adott tárgyat és “leteszi” a földre,
	 *  azaz a Player field-jének az items tárolójába, ezen kívül a saját components tárolójából is kiveszi magát.
	 */
	public void Drop(Player p,int tab) {
		for(int i=0; i<tab; i++)
			System.out.print("\t");
		System.out.printf("Az FlareGun osztaly Drop(p:Player):void hivodott meg \n");
		p.RemoveItem(this,tab+1);
	}
	
	/**
	 *  Ez a függvény pedig a tárgyak felvételére szolgál.
	 *   Tehát, ha valaki felvesz egy tárgyat, a Field items tárolójából átkerül a Player items tárolójába.
	 *    Ezen kívül beteszi magát a saját components tárolójába is.
	 */
	public void PickUp(Player p,int tab) {
		for(int i=0; i<tab; i++)
			System.out.print("\t");
		System.out.print("Az FlareGun osztaly PickUp(p:Player) fuggvenye hivodott meg");
		p.AddItem(this,tab+1);
		components.add(this);
	}
	
	public void DecreaseLayer(int i, int tab) {
		for(int j=0; j<tab; j++)
			System.out.print("\t");
		System.out.print("A Item osztaly DecreaseLayer() fuggvenye hivodott meg");
		layer -= i;
	}

	public boolean Pull(Player p, Field to) {
		return false;
	}


	public void SetLayer(int num) {
		this.layer=num;
		System.out.printf("Az FlareGun osztï¿½ly SetLayer(num:int):void hï¿½vï¿½dott meg \n");
	}

	public int GetLayer(int tab) {
		for(int i=0; i<tab; i++)
			System.out.print("\t");
		System.out.print("A FlareGun osztaly GetLayer() fuggvenye hivodott meg");
		return layer;
	}

	public void SetVisible(boolean b, int tab) {
		for(int i=0; i<tab; i++)
			System.out.print("\t");
		System.out.print("Az FlareGun osztaly SetVisible() fuggvenye hivodott meg");
		visible = b;
		
	}
}
