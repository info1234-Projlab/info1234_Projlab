package classes;
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Item.java
//  @ Date : 3/27/2020
//  @ Author : 
//
//

/**
Felelõssége a tárgyak használatának, elérhetõségének és 
láthatóságának felügyelete. Ez az osztály felel azért, hogy az adott tárgy birtoklása 
a játékosra milyen hatással van. 
 *
 */


public class Item implements Inventory {
	protected int layer;
	protected boolean visible;
	
	public Item(int layer, boolean visible) {
		this.layer=layer;
		this.visible=visible;
	}
	
	public boolean Eat(Player p) {
		return false;
	}
	
	public boolean Dig(Player p) {
		return false;
	}
	
	public boolean Pull(Player p, Field to) {
		return false;
	}
	
	public boolean PutOn(Player p) {
		return false;
	}
	
	public boolean Shoot(Player p, int tab) {
		return false;
	}
	
	public boolean Swim(Player p) {
		return false;
	}
	
	/**
	 * Ha valaki el szeretne dobni egy tárgyat akkor hívódik ez a 
	 * függvény. Ilyenkor, a paraméterül kapott Player items tárolójából kiveszi az adott tárgyat és
	 *  “leteszi” a földre, azaz a Player field-jének az items tárolójába.
	 */
	public void Drop(Player p,int tab) {
		for(int i=0; i<tab; i++)
			System.out.print("\t");
		System.out.printf("Az Item osztaly Drop(p:Player):void hivodott meg \n");
		p.RemoveItem(this,tab+1);
	}
	
	/**
	 * 
	 *  A hÃ³rÃ©tegeket csÃ¶kkenti az itemen.
	 *  @param i Mennyivel csÃ¶kken a hÃ³rÃ©tegek szÃ¡ma.
	 * @param tab	IndentÃ¡lÃ¡st jelzi. 
	 */
	public void DecreaseLayer(int i, int tab) {
		for(int j=0; j<tab; j++)
			System.out.print("\t");
		System.out.print("Az Item osztaly DecreaseLayer() fuggvenye hivodott meg");
		layer -= i;
	}
	
	/**
	 * Ez pedig a tárgyak felvételére szolgál. Tehát ha valaki felvesz egy tárgyat, 
	 * a Field items tárolójából átkerül a Player items tárolójába.
	 */
	public void PickUp(Player p, int tab) {
		for(int i=0; i<tab; i++)
			System.out.print("\t");
		System.out.print("Az Item osztaly PickUp(p:Player) fuggvenye hivodott meg");
		p.AddItem(this,tab+1);
	}
	
	/**
	 * 
	 *  A rÃ©tegek szÃ¡mÃ¡t adja vissza.
	 * @param tab	IndentÃ¡lÃ¡st jelzi. 
	 */
	public int GetLayer(int tab) {
		for(int i=0; i<tab; i++)
			System.out.print("\t");
		System.out.print("Az Item osztaly GetLayer() fuggvenye hivodott meg");
		return layer;
	}
	
	public void SetLayer(int num) {
		this.layer=num;
		System.out.printf("Az Item osztï¿½ly SetLayer(num:int):void hï¿½vï¿½dott meg \n");
	}
	
	/**
	 * 
	 *  A tÃ¡rgy lÃ¡thatÃ³sÃ¡gÃ¡t allÃ­tja be.
	 *  @param b A lÃ¡thatÃ³sag.
	 * @param tab	IndentÃ¡lÃ¡st jelzi. 
	 */
	public void SetVisible(boolean b, int tab) {
		for(int i=0; i<tab; i++)
			System.out.print("\t");
		System.out.print("Az Item osztaly SetVisible() fuggvenye hivodott meg");
		visible = b;
	}
	
	public boolean GetVisible(int tab) {
		for(int i=0; i<tab; i++)
			System.out.print("\t");
		System.out.print("Az Item osztaly GetVisible():boolean fuggvenye hivodott meg");
		return visible;
	}
	
	public boolean Pull(Player p) {
		return false;
	}

}
